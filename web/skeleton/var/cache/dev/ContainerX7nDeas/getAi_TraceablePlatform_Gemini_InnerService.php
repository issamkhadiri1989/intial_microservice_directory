<?php

namespace ContainerX7nDeas;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAi_TraceablePlatform_Gemini_InnerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'ai.traceable_platform.gemini.inner' shared service.
     *
     * @return \Symfony\AI\Platform\Platform
     */
    public static function do($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['ai.traceable_platform.gemini.inner'] = $container->createProxy('PlatformProxyF32abb4', static fn () => \PlatformProxyF32abb4::createLazyProxy(static fn () => self::do($container, false)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-platform/src/PlatformInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-platform/src/Platform.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-platform/src/Bridge/Gemini/PlatformFactory.php';

        return \Symfony\AI\Platform\Bridge\Gemini\PlatformFactory::create($container->getEnv('GEMINI_AI_KEY'), ($container->privates['.debug.http_client'] ?? self::get_Debug_HttpClientService($container)), ($container->privates['ai.platform.contract.google'] ?? $container->load('getAi_Platform_Contract_GoogleService')));
    }
}
