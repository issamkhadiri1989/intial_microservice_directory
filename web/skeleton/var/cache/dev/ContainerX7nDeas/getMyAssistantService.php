<?php

namespace ContainerX7nDeas;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMyAssistantService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Ai\Service\MyAssistant' shared autowired service.
     *
     * @return \App\Ai\Service\MyAssistant
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/src/Ai/Service/MyAssistant.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/AgentInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/Agent.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-platform/src/Model.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-platform/src/Bridge/Gemini/Gemini.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/InputProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/OutputProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/AgentAwareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/AgentAwareTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/Toolbox/AgentProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/Toolbox/ToolResultConverter.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/StructuredOutput/AgentProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/StructuredOutput/ResponseFormatFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/StructuredOutput/ResponseFormatFactory.php';

        $a = ($container->privates['ai.traceable_toolbox.gemini'] ?? $container->load('getAi_TraceableToolbox_GeminiService'));

        if (isset($container->privates['App\\Ai\\Service\\MyAssistant'])) {
            return $container->privates['App\\Ai\\Service\\MyAssistant'];
        }
        $b = ($container->privates['debug.serializer'] ?? self::getDebug_SerializerService($container));

        if (isset($container->privates['App\\Ai\\Service\\MyAssistant'])) {
            return $container->privates['App\\Ai\\Service\\MyAssistant'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['App\\Ai\\Service\\MyAssistant'])) {
            return $container->privates['App\\Ai\\Service\\MyAssistant'];
        }
        $d = new \Symfony\AI\Agent\Toolbox\AgentProcessor($a, new \Symfony\AI\Agent\Toolbox\ToolResultConverter($b), $c, false);
        $e = new \Symfony\AI\Agent\StructuredOutput\AgentProcessor(new \Symfony\AI\Agent\StructuredOutput\ResponseFormatFactory(($container->privates['ai.platform.json_schema_factory'] ?? self::getAi_Platform_JsonSchemaFactoryService($container))), $b);

        $f = new \Symfony\AI\Agent\Agent(($container->privates['ai.traceable_platform.gemini'] ?? $container->load('getAi_TraceablePlatform_GeminiService')), new \Symfony\AI\Platform\Bridge\Gemini\Gemini('gemini-2.0-flash'), [$d, $e], [$d, $e], ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));

        return $container->privates['App\\Ai\\Service\\MyAssistant'] = new \App\Ai\Service\MyAssistant($f, $f);
    }
}
