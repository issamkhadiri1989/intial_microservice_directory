<?php

namespace ContainerX7nDeas;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAi_TraceableToolbox_GeminiService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'ai.traceable_toolbox.gemini' shared service.
     *
     * @return \Symfony\AI\AiBundle\Profiler\TraceableToolbox
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/Toolbox/FaultTolerantToolbox.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/Toolbox/ToolFactory/ChainFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ai-agent/src/Toolbox/ToolFactory/MemoryToolFactory.php';
        include_once \dirname(__DIR__, 4).'/src/Ai/Tool/Tokenizer.php';

        $a = ($container->privates['ai.tool_call_argument_resolver'] ?? self::getAi_ToolCallArgumentResolverService($container));

        if (isset($container->privates['ai.traceable_toolbox.gemini'])) {
            return $container->privates['ai.traceable_toolbox.gemini'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['ai.traceable_toolbox.gemini'])) {
            return $container->privates['ai.traceable_toolbox.gemini'];
        }

        return $container->privates['ai.traceable_toolbox.gemini'] = new \Symfony\AI\AiBundle\Profiler\TraceableToolbox(new \Symfony\AI\Agent\Toolbox\FaultTolerantToolbox(new \Symfony\AI\Agent\Toolbox\Toolbox([($container->privates['Symfony\\AI\\Agent\\Toolbox\\Tool\\SerpApi'] ?? $container->load('getSerpApiService')), ($container->privates['App\\Ai\\Tool\\Tokenizer'] ??= new \App\Ai\Tool\Tokenizer())], new \Symfony\AI\Agent\Toolbox\ToolFactory\ChainFactory([new \Symfony\AI\Agent\Toolbox\ToolFactory\MemoryToolFactory(($container->privates['ai.platform.json_schema_factory'] ?? self::getAi_Platform_JsonSchemaFactoryService($container))), ($container->privates['ai.tool_factory'] ?? self::getAi_ToolFactoryService($container))]), $a, ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), $b)));
    }
}
